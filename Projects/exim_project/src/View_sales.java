
//import static Add_Customer.serial_id;
import java.sql.*;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author DELL
 */
public class View_sales extends javax.swing.JInternalFrame {

    /**
     * Creates new form View_sales
     */
    Connection con;
    //charges
   
    //plus due date

    public View_sales(Connection con) {
        initComponents();
        this.con = con;
        search_txt.setUI(new HintTextFieldUI("Search", true));
        brand_items();
        sales_table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        view_sale_panel = new javax.swing.JPanel();
        view_details_panel = new javax.swing.JPanel();
        view_sale_scrollpane = new javax.swing.JScrollPane();
        view_sale_table = new javax.swing.JTable();
        product_label = new javax.swing.JLabel();
        quantity_label = new javax.swing.JLabel();
        price_label = new javax.swing.JLabel();
        price_txt = new javax.swing.JTextField();
        total_amount_label = new javax.swing.JLabel();
        convert_amount1 = new javax.swing.JButton();
        payment_label = new javax.swing.JLabel();
        payment_txt = new javax.swing.JTextField();
        mode_label = new javax.swing.JLabel();
        total_amount_scrollpanel = new javax.swing.JScrollPane();
        total_amount_txt = new javax.swing.JTextField();
        reset_btn = new javax.swing.JButton();
        update_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        quantity_txt = new javax.swing.JTextField();
        id_label = new javax.swing.JLabel();
        id_txt = new javax.swing.JTextField();
        bill_no_label = new javax.swing.JLabel();
        bill_no_txt = new javax.swing.JTextField();
        sold_date_label = new javax.swing.JLabel();
        sold_date_txt = new javax.swing.JTextField();
        due_date_label = new javax.swing.JLabel();
        due_date_txt = new javax.swing.JTextField();
        payment_label1 = new javax.swing.JLabel();
        creditor_pay_txt = new javax.swing.JTextField();
        updated_mode_cmb = new javax.swing.JComboBox<>();
        mode_label1 = new javax.swing.JLabel();
        search_btn = new javax.swing.JButton();
        search_txt = new javax.swing.JTextField();
        roll_back_btn = new javax.swing.JButton();
        product_cmb = new javax.swing.JComboBox<>();
        mode_cmb = new javax.swing.JComboBox<>();
        product_txt = new javax.swing.JTextField();
        quantity_spinner = new javax.swing.JSpinner();
        cust_name_label = new javax.swing.JLabel();
        cust_name_txt = new javax.swing.JTextField();
        charges_label = new javax.swing.JLabel();
        charges_txt = new javax.swing.JTextField();
        brand_label = new javax.swing.JLabel();
        brand_txt = new javax.swing.JTextField();
        brand_cmb = new javax.swing.JComboBox<>();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        view_sale_panel.setBackground(new java.awt.Color(255, 153, 0));
        view_sale_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        view_details_panel.setBackground(new java.awt.Color(0, 0, 255));
        view_details_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        view_sale_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        view_sale_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                view_sale_tableMouseClicked(evt);
            }
        });
        view_sale_scrollpane.setViewportView(view_sale_table);

        view_details_panel.add(view_sale_scrollpane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 1250, 200));

        product_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        product_label.setText("Prodouct");
        view_details_panel.add(product_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        quantity_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        quantity_label.setText("Quantity");
        view_details_panel.add(quantity_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        price_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        price_label.setText("Price(in Rs.)");
        view_details_panel.add(price_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        price_txt.setEditable(false);
        price_txt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        price_txt.setEnabled(false);
        price_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                price_txtActionPerformed(evt);
            }
        });
        view_details_panel.add(price_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 330, 300, 30));

        total_amount_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        total_amount_label.setText("Total Amount");
        view_details_panel.add(total_amount_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, -1, -1));

        convert_amount1.setText("Convert");
        convert_amount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convert_amount1ActionPerformed(evt);
            }
        });
        view_details_panel.add(convert_amount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 400, 90, 40));

        payment_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        payment_label.setText("Payment");
        view_details_panel.add(payment_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 210, -1, -1));

        payment_txt.setEditable(false);
        payment_txt.setEnabled(false);
        payment_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                payment_txtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                payment_txtFocusLost(evt);
            }
        });
        payment_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payment_txtActionPerformed(evt);
            }
        });
        view_details_panel.add(payment_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 210, 300, 30));

        mode_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mode_label.setText("Mode");
        view_details_panel.add(mode_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 270, -1, -1));

        total_amount_txt.setEditable(false);
        total_amount_txt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        total_amount_txt.setEnabled(false);
        total_amount_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                total_amount_txtActionPerformed(evt);
            }
        });
        total_amount_scrollpanel.setViewportView(total_amount_txt);

        view_details_panel.add(total_amount_scrollpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 300, 70));

        reset_btn.setBackground(new java.awt.Color(255, 153, 0));
        reset_btn.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        reset_btn.setText("Reset");
        reset_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_btnActionPerformed(evt);
            }
        });
        view_details_panel.add(reset_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 370, 115, -1));

        update_btn.setBackground(new java.awt.Color(255, 153, 0));
        update_btn.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        update_btn.setText("Update");
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });
        view_details_panel.add(update_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 150, 115, -1));

        delete_btn.setBackground(new java.awt.Color(255, 153, 0));
        delete_btn.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });
        view_details_panel.add(delete_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 290, 115, -1));

        quantity_txt.setEditable(false);
        quantity_txt.setEnabled(false);
        quantity_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantity_txtFocusLost(evt);
            }
        });
        quantity_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantity_txtActionPerformed(evt);
            }
        });
        view_details_panel.add(quantity_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 300, 30));

        id_label.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        id_label.setText("ID");
        view_details_panel.add(id_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        id_txt.setEditable(false);
        id_txt.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        id_txt.setEnabled(false);
        view_details_panel.add(id_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 90, 30));

        bill_no_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        bill_no_label.setText("Bill No");
        view_details_panel.add(bill_no_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        bill_no_txt.setEditable(false);
        bill_no_txt.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        bill_no_txt.setEnabled(false);
        view_details_panel.add(bill_no_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 300, 30));

        sold_date_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        sold_date_label.setText("Sold ");
        view_details_panel.add(sold_date_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 150, -1, -1));

        sold_date_txt.setEditable(false);
        sold_date_txt.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        sold_date_txt.setEnabled(false);
        view_details_panel.add(sold_date_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 150, 300, 30));

        due_date_label.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        due_date_label.setText("Due Date");
        view_details_panel.add(due_date_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 10, -1, -1));

        due_date_txt.setEditable(false);
        due_date_txt.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        due_date_txt.setEnabled(false);
        view_details_panel.add(due_date_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 150, 30));

        payment_label1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        payment_label1.setText("Creditor Pay ");
        view_details_panel.add(payment_label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 330, -1, -1));

        creditor_pay_txt.setEditable(false);
        creditor_pay_txt.setEnabled(false);
        creditor_pay_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                creditor_pay_txtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                creditor_pay_txtFocusLost(evt);
            }
        });
        creditor_pay_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditor_pay_txtActionPerformed(evt);
            }
        });
        view_details_panel.add(creditor_pay_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 330, 300, 30));

        updated_mode_cmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Select Mode-----", "Cash", "Cheque", "Online" }));
        updated_mode_cmb.setEnabled(false);
        view_details_panel.add(updated_mode_cmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 390, 300, 30));

        mode_label1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mode_label1.setText("Payment Mode");
        view_details_panel.add(mode_label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 390, -1, -1));

        search_btn.setBackground(new java.awt.Color(255, 153, 0));
        search_btn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        search_btn.setForeground(new java.awt.Color(255, 255, 255));
        search_btn.setText("Search");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });
        view_details_panel.add(search_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, -1, 30));

        search_txt.setBackground(new java.awt.Color(51, 0, 255));
        search_txt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        search_txt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        view_details_panel.add(search_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 290, 30));

        roll_back_btn.setBackground(new java.awt.Color(255, 153, 0));
        roll_back_btn.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        roll_back_btn.setText("Roll Back");
        roll_back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roll_back_btnActionPerformed(evt);
            }
        });
        view_details_panel.add(roll_back_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 220, 115, -1));

        product_cmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Select product-----" }));
        product_cmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                product_cmbActionPerformed(evt);
            }
        });
        product_cmb.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                product_cmbPropertyChange(evt);
            }
        });
        view_details_panel.add(product_cmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 210, 140, 30));

        mode_cmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Select Mode-----", "Cash", "Cheque", "Online" }));
        mode_cmb.setEnabled(false);
        view_details_panel.add(mode_cmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 270, 300, 30));

        product_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                product_txtFocusLost(evt);
            }
        });
        product_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                product_txtActionPerformed(evt);
            }
        });
        view_details_panel.add(product_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, 300, 30));

        quantity_spinner.setEnabled(false);
        quantity_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantity_spinnerStateChanged(evt);
            }
        });
        view_details_panel.add(quantity_spinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 270, 60, 30));

        cust_name_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cust_name_label.setText("Cust. Name");
        view_details_panel.add(cust_name_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 90, -1, -1));

        cust_name_txt.setEditable(false);
        cust_name_txt.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        view_details_panel.add(cust_name_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 90, 300, 30));

        charges_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        charges_label.setText("Charges");
        view_details_panel.add(charges_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 440, -1, -1));

        charges_txt.setEditable(false);
        charges_txt.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        charges_txt.setEnabled(false);
        view_details_panel.add(charges_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 440, 300, 30));

        brand_label.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        brand_label.setText("Brand Name");
        view_details_panel.add(brand_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        brand_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                brand_txtFocusLost(evt);
            }
        });
        brand_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brand_txtActionPerformed(evt);
            }
        });
        view_details_panel.add(brand_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 300, 30));

        brand_cmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Select Brand-----" }));
        brand_cmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brand_cmbActionPerformed(evt);
            }
        });
        view_details_panel.add(brand_cmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 140, 30));

        view_sale_panel.add(view_details_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1300, 770));

        getContentPane().add(view_sale_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1350, 840));

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void brand_items() {
        //product_txt.setText("");
        brand_cmb.removeAllItems();
        brand_cmb.addItem("-----Select Brand-----");
        brand_id.clear();
        String query = "select * from product_brand";
        try {
            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                brand_cmb.addItem(rs.getString("brand_name"));
                brand_id.add(rs.getString("brand_id"));

            }
        } catch (SQLException ex) {
            Logger.getLogger(Add_Sales.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Vector sales_details(String search) {
        String found = search;
        try {
            PreparedStatement ps = con.prepareStatement(query_show);
            if (!found.isEmpty()) {
                ps.setString(1, found);
            }
            ResultSet rs = ps.executeQuery();
            h = new Vector();
            Vector d = new Vector();
            h.add("ID");
            h.add("Bill Number");
            h.add("Customer Name");
            h.add("Brand Name");
            h.add("Product Name");
            h.add("Product Qty");
            h.add("Product Price");
            h.add("Total Amount");
            h.add("Purchase Date");
            h.add("Due Date");
            h.add("Payment");
            h.add("Creditor");
            h.add("Payment Mode");
            h.add("Creditor Mode");

            row = 0;
            while (rs.next()) {
                Vector d1 = new Vector();
                d1.add(rs.getString("serial_id"));
                d1.add(rs.getString("bill_no"));
                d1.add(rs.getString("name"));
                d1.add(rs.getString("brand_name"));
                d1.add(rs.getString("product_name"));
                int qty1 = rs.getInt("product_quantity");
                d1.add(qty1);
                int total_amount = rs.getInt("total_amount");
                try {
                    d1.add(total_amount / qty1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Some technical error!!!");
                }
                d1.add(total_amount);
                d1.add(rs.getString("sold_date"));
                d1.add(rs.getString("due_date"));
                d1.add(rs.getString("payment"));
                d1.add(rs.getString("creditors"));
                d1.add(rs.getString("mode_payment"));
                d1.add(rs.getString("updated_mode"));
                d.add(d1);
                row++;
            }
            if (d.isEmpty()) {
                return null;
            }
            return d;

        } catch (SQLException ex) {
            return null;
        }

    }

    public void sales_table() {
        query_show = "select * from sale,customer where sale.customer_id=customer.serial_id";
        Vector d = sales_details("");

        DefaultTableModel dtf = new DefaultTableModel(d, h);
        view_sale_table.setModel(dtf);

    }
    private void price_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_price_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_price_txtActionPerformed

    private void convert_amount1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convert_amount1ActionPerformed
        // TODO add your handling code here:
        if (conversion) {
            price_txt.setText(NumberFormat.getInstance().format(price));
            total_amount_txt.setText(NumberFormat.getInstance().format(sum));
            creditor_pay_txt.setText(NumberFormat.getInstance().format(balance));
            conversion = false;
        } else {
            price_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(price)));
            total_amount_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(sum)));
            creditor_pay_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(balance)));
            conversion = true;
        }

    }//GEN-LAST:event_convert_amount1ActionPerformed

    private void payment_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_payment_txtFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_payment_txtFocusGained
    public void product_change_quantity() {
        String product_quantity1 = String.valueOf(total_quantity_select + qty_purchased_select);
        System.out.println(total_quantity);
        System.out.println(qty_purchased + "do");
        String query = "update export_item set product_quantity=? where product_name=?";
        String query1 = "update export_item set product_quantity=? where product_name=?";
        String product_quantity = String.valueOf(total_quantity - Integer.parseInt(qty));
        System.out.println(total_quantity - Integer.parseInt(qty) + "sk");
        try {
            PreparedStatement ps = con.prepareStatement(query);
            PreparedStatement ps1 = con.prepareStatement(query1);
            ps.setString(1, product_quantity1);
            ps.setString(2, product_select);
            ps.executeUpdate();
            ps.close();
            ps1.setString(1, product_quantity);
            ps1.setString(2, product_name);
            ps1.executeUpdate();
            ps1.close();

        } catch (SQLException ex) {
            Logger.getLogger(Add_Sales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void product_quantity_add() {
        String product_quantity = String.valueOf(total_quantity_select + (qty_purchased_select - Integer.parseInt(qty)));
        String query = "update export_item set product_quantity=? where product_name=?";
        try {
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, product_quantity);
            ps.setString(2, product_select);
            ps.executeUpdate();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Add_Sales.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void product_quantity_minus() {
        String product_quantity = String.valueOf(total_quantity_select - (Integer.parseInt(qty) - qty_purchased_select));
        String query = "update export_item set product_quantity=? where product_name=?";
        try {
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, product_quantity);
            ps.setString(2, product_select);
            ps.executeUpdate();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Add_Sales.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void payment_txtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_payment_txtFocusLost
        // TODO add your handling code here:

        String paid = payment_txt.getText();
        if (!paid.matches(payment_checker)) {
            updated_mode_cmb.setSelectedIndex(0);
        } else if (creditor_mode != null) {
            updated_mode_cmb.setSelectedItem(creditor_mode);
        } else {
            updated_mode_cmb.setSelectedIndex(0);
        }
        balance = 0;
        try {
            if (!paid.isEmpty() && !paid.trim().matches("")) {

                balance = sum - Long.parseLong(paid);
                if (conversion) {
                    creditor_pay_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(balance)));
                } else {
                    creditor_pay_txt.setText(NumberFormat.getInstance().format(balance));

                }
            } else {
                creditor_pay_txt.setText("");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Number is too long!!!");
        }
    }//GEN-LAST:event_payment_txtFocusLost

    private void payment_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payment_txtActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_payment_txtActionPerformed

    private void total_amount_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_total_amount_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_total_amount_txtActionPerformed

    private void quantity_txtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantity_txtFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_quantity_txtFocusLost

    private void quantity_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantity_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantity_txtActionPerformed

    private void creditor_pay_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_creditor_pay_txtFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_creditor_pay_txtFocusGained

    private void creditor_pay_txtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_creditor_pay_txtFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_creditor_pay_txtFocusLost

    private void creditor_pay_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditor_pay_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditor_pay_txtActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        // TODO add your handling code here:
        String search_sale = search_txt.getText();
        
//        System.out.println(d1);
//        String search = search_txt.getText();
//        System.out.println(search + "hello");

//        if (d1 == null) {
//            System.out.println("sk");
//        }
        if (search_sale.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Something to search!!!");
        } else
        {
            query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.serial_id=? AND sale.customer_id =customer.serial_id";

        Vector d1 = sales_details(search_sale);
            if(d1 == null) {
            query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.bill_no=? AND sale.customer_id =customer.serial_id";
            d1 = sales_details(search_sale);
            System.out.println("sk");
            System.out.println(d1);
            if (d1 == null) {
                query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.product_name=? AND sale.customer_id =customer.serial_id";
                d1 = sales_details(search_sale);
                System.out.println("sk");
                if (d1 == null) {
                    query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.sold_date=? AND sale.customer_id =customer.serial_id";
                    d1 = sales_details(search_sale);
                    System.out.println("sk" + d1);
                    if (d1 == null) {
                        query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.brand_name=? AND sale.customer_id =customer.serial_id";
                        ;
                        d1 = sales_details(search_sale);
                        System.out.println("ok");
                        if (d1 == null) {
                            query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.mode_payment=? AND sale.customer_id =customer.serial_id";
                            d1 = sales_details(search_sale);
                            if (d1 == null) {
                                query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.name=? AND sale.customer_id =customer.serial_id";
                                d1 = sales_details(search_sale);
                                System.out.println("sk");
                                if (d1 == null) {
                                    query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.contact_no=? AND sale.customer_id =customer.serial_id";
                                    d1 = sales_details(search_sale);
                                    System.out.println("sk try" + d1);
                                    if (d1 == null) {
                                        query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.other_contact_no=? AND sale.customer_id =customer.serial_id";
                                        d1 = sales_details(search_sale);
                                        if (d1 == null) {
                                            query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.address=? AND sale.customer_id =customer.serial_id";
                                            d1 = sales_details(search_sale);
                                            if (d1 == null) {
                                                query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.e_mail=? AND sale.customer_id =customer.serial_id";
                                                d1 = sales_details(search_sale);
                                                if (d1 == null) {
                                                    query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.serial_id LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                    d1 = sales_details("");

                                                    if (d1 == null) {
                                                        query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.bill_no LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                        d1 = sales_details("");
                                                        if (d1 == null) {
                                                            query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.name LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                            d1 = sales_details("");
                                                            if (d1 == null) {
                                                                query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.contact_no LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                d1 = sales_details("");
                                                                if (d1 == null) {
                                                                    query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.other_contact_no LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                    d1 = sales_details("");
                                                                    if (d1 == null) {
                                                                        query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.product_name LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                        d1 = sales_details("");
                                                                        if (d1 == null) {
                                                                            query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.e_mail LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                            d1 = sales_details("");
                                                                            if (d1 == null) {
                                                                                query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON customer.address LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                                d1 = sales_details("");
                                                                                if (d1 == null) {
                                                                                    query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.sold_date LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                                    d1 = sales_details("");
                                                                                    if (d1 == null) {
                                                                                        query_show = "SELECT sale.*,customer.* FROM sale INNER JOIN customer ON sale.brand_name LIKE '" + search_sale + "%'  AND sale.customer_id =customer.serial_id";
                                                                                        d1 = sales_details("");

                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (d1 == null) {
            JOptionPane.showMessageDialog(this, "No result found!\nTry Again");
            System.out.println("sk");
        } else {
            DefaultTableModel dtf = new DefaultTableModel(d1, h);
            view_sale_table.setModel(dtf);
            if (row > 1) {
                JOptionPane.showMessageDialog(this, row + " rows found!");
            } else {
                JOptionPane.showMessageDialog(this, row + " row found!");
            }
            System.out.println("k");
        }
        }

    }//GEN-LAST:event_search_btnActionPerformed
    public void select_data() {

        qty_purchased = (int) tm.getValueAt(row, 5);
        qty_purchased_select = qty_purchased;
        qty = String.valueOf(qty_purchased);
        total_quantity_select = total_quantity;

        //
        quantity_txt.setText(String.valueOf(qty_purchased));
        //int quantity_minimum=Integer.parseInt(qty_purchased);
        //quantity_spinner.setModel(new javax.swing.SpinnerNumberModel(0, -qty_purchased, total_quantity, 1));

        price_txt.setText(String.valueOf(tm.getValueAt(row, 6)));
        sum = (int) (tm.getValueAt(row, 7));
        if (conversion) {
            total_amount_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(sum)));
        } else {
            total_amount_txt.setText(NumberFormat.getInstance().format(sum));

        }
        sold_date_txt.setText((String) tm.getValueAt(row, 8));
        due_date_txt.setText((String) tm.getValueAt(row, 9));
        payment_checker = (String) tm.getValueAt(row, 10);
        payment_txt.setText(String.valueOf(payment_checker));
        System.out.println(tm.getValueAt(row, 11));
        balance = Long.parseLong(String.valueOf(tm.getValueAt(row, 11)));
        if (conversion) {
            creditor_pay_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(balance)));
        } else {
            creditor_pay_txt.setText(NumberFormat.getInstance().format(balance));

        }
        sold_mode = (String) tm.getValueAt(row, 12);
        mode_cmb.setSelectedItem(sold_mode);
        creditor_mode = (String) tm.getValueAt(row, 13);
        System.out.println(creditor_mode);
        if (creditor_mode != null) {
            updated_mode_cmb.setSelectedItem(creditor_mode);
        } else {
            updated_mode_cmb.setSelectedIndex(0);
        }
    }
    private void view_sale_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_view_sale_tableMouseClicked
        // TODO add your handling code here:
        //quantity_spinner.setValue(0);
        row = view_sale_table.getSelectedRow();
        tm = view_sale_table.getModel();
        serial_id = (String) tm.getValueAt(row, 0);
        id_txt.setText(serial_id);
        bill_no_txt.setText((String) tm.getValueAt(row, 1));
        cust_name_txt.setText((String) tm.getValueAt(row, 2));
        brand_select = (String) tm.getValueAt(row, 3);
        brand_cmb.setSelectedItem(brand_select);
        brand_txt.setText(brand_select);
        product_select = (String) tm.getValueAt(row, 4);
       
         product_cmb.addItem(product_select);
     
        product_cmb.setSelectedItem(product_select);
        product_txt.setText(product_select);
        //select_data();
        //total_amount_txt.setText((String) tm.getValueAt(row,5));
    }//GEN-LAST:event_view_sale_tableMouseClicked
    public void sales_entry_update() {
        String payment, updated_time, updated_due_date, updated_date, updated_mode = "";
        Long updated_payment = 0l, updated_creditor = 0l;
        //serial_id = id_txt.getText();
        payment = payment_txt.getText();
        //total_amount = total_amount_txt.getText();
        //creditor_pay = creditor_pay_txt.getText();

        if (updated_mode_cmb.getSelectedIndex() > 0) {
            updated_mode = (String) updated_mode_cmb.getSelectedItem();
            updated_payment = Long.parseLong(payment) + balance;
            updated_creditor = sum - updated_payment;
        } else {
            updated_payment = Long.parseLong(payment);
            updated_creditor = sum - updated_payment;
        }
        DateTimeFormatter dtf_time = DateTimeFormatter.ofPattern("HH:mm:ss:SSS");
        LocalTime now = LocalTime.now();
        updated_time = dtf_time.format(now);
        DateTimeFormatter dtf_date = DateTimeFormatter.ofPattern("dd/MMM/YYYY");
        LocalDate localDate = LocalDate.now();
        updated_date = dtf_date.format(localDate);
        if (updated_creditor == 0) {
            updated_due_date = "No Due";
        } else {
            /*String sold_date=sold_date_txt.getText();
            SimpleDateFormat sdf=new SimpleDateFormat("dd/MMM/YYYY");
            String d1=sdf.format(sold_date);
            System.out.println(d1);*/
            updated_due_date = "";//do this after
            //LocalDate futureDate = LocalDate.parse(sold_date_txt.getText()).plusMonths(1);

        }

        String query = "update sale set product_name=?,product_quantity=?,total_amount=?,payment=?,mode_payment=?,creditors=?,updated_mode=?,updated_time=?,updated_date=?,due_date=?,brand_name=? where serial_id=?";
        try {
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, product_name);
            System.out.println(qty + "jk");
            ps.setString(2, qty);
            ps.setLong(3, sum);
            ps.setLong(4, updated_payment);
            ps.setString(5, (String) mode_cmb.getSelectedItem());
            ps.setLong(6, updated_creditor);
            ps.setString(7, updated_mode);
            ps.setString(8, updated_time);
            ps.setString(9, updated_date);
            ps.setString(10, updated_due_date);
            ps.setString(11, brand_name);
            System.out.println(serial_id);
            ps.setString(12, serial_id);

            ps.executeUpdate();
            //ps.close();
            JOptionPane.showMessageDialog(this, "Data Updated Successfully....");
            reset = true;

        } catch (SQLException ex) {
            Logger.getLogger(View_sales.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed
        // TODO add your handling code here:
//        int payment_mode = updated_mode_cmb.getSelectedIndex();
//        if (payment_mode <= 0) {
//            JOptionPane.showMessageDialog(this, "Payment Mode cannot be empty");
//        }

        if (!product_name.matches(product_select)) {
            product_change_quantity();
            sales_entry_update();

        } else if (Integer.parseInt(qty) < qty_purchased_select) {
            product_quantity_add();
            sales_entry_update();
        } else if (Integer.parseInt(qty) > qty_purchased_select) {
            product_quantity_minus();
            sales_entry_update();
        } else if (!payment_txt.getText().matches(payment_checker) || !mode_cmb.getSelectedItem().equals(sold_mode)) {

            sales_entry_update();

        } else if (updated_mode_cmb.getSelectedIndex() > 0) {
            sales_entry_update();
        } else {
            JOptionPane.showMessageDialog(this, "Payment Mode cannot be empty");
        }
        if (reset) {
            reset_fields();
            reset = false;
        }

    }//GEN-LAST:event_update_btnActionPerformed
    public void reset_fields() {
        id_txt.setText("");
        bill_no_txt.setText("");
        cust_name_txt.setText("");
        product_txt.setText("");
        quantity_txt.setText("");
        price_txt.setText("");
        sold_date_txt.setText("");
        due_date_txt.setText("");
        payment_txt.setText("");
        mode_cmb.setSelectedIndex(0);
        creditor_pay_txt.setText("");
        updated_mode_cmb.setSelectedIndex(0);
        mode_cmb.setEnabled(false);
        payment_txt.setEditable(false);
        payment_txt.setEnabled(false);
        updated_mode_cmb.setEnabled(false);
        brand_items();
        sales_table();
    }
    private void product_cmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_product_cmbActionPerformed
        // TODO add your handling code here:

        //quantity_cmb.removeAllItems();
        //quantity_cmb.addItem("-----Select Quantity-----");
        // System.out.println("clicked");
        quantity_txt.setText("");
        product_name = (String) product_cmb.getSelectedItem();

        if (product_cmb.getSelectedIndex() > 0) {
            product_txt.setText(product_name);
            quantity_spinner.setEnabled(true);
            String query = "select * from export_item where product_name=?";
            try {
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, product_name);
                ResultSet rs = ps.executeQuery();
                total_quantity = 0;
                //int total_quantity=0;
                //int price = 0;
                price = 0;
                while (rs.next()) {
                    total_quantity = rs.getInt("product_quantity");
                    price = rs.getInt("product_price");

                }

                //System.out.println(quantity_minimum+"ok");
                if (product_cmb.getSelectedItem().equals(product_select)) {
                    select_data();
                } else {
                    qty_purchased = 0;
                }
                mode_cmb.setEnabled(true);
                payment_txt.setEditable(true);
                payment_txt.setEnabled(true);
                updated_mode_cmb.setEnabled(true);
                quantity_spinner.setModel(new javax.swing.SpinnerNumberModel(0, -(qty_purchased - 1), total_quantity, 1));
                //SpinnerModel sm = new SpinnerNumberModel(0,-10,total_quantity,1); //default value,lower bound,upper bound,increment by
                // quantity_spinner = new JSpinner(sm);
                //String output=NumberFormat.getInstance().format(price);
                //System.out.println(output);
                if (conversion) {
                    price_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(price)));
                } else {
                    price_txt.setText(NumberFormat.getInstance().format(price));
                }
                price_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(price)));

            } catch (SQLException ex) {
                Logger.getLogger(Add_Sales.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            quantity_txt.setText("");
            price_txt.setText("");
            payment_txt.setText("");
        }
        if (quantity_txt.getText().matches("")) {
            total_amount_txt.setText("");

            payment_txt.setEnabled(false);
        }
    }//GEN-LAST:event_product_cmbActionPerformed

    private void product_txtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_product_txtFocusLost
        // TODO add your handling code here:
        boolean found_product = false;
        product_name = "";
        product_name = product_txt.getText();
        if (!product_name.isEmpty()) {
            for (int check = 0; check < product_cmb.getItemCount(); check++) {
                if (product_name.equalsIgnoreCase(product_cmb.getItemAt(check))) {
                    found_product = true;
                    product_cmb.setSelectedIndex(check);
                }
            }
            if (found_product) {
                System.out.println("found");

            } else {
                System.out.println(" Not found");
                brand_items();
                JOptionPane.showMessageDialog(this, "No Matching Item found!\nPlease refer Drop Down Menu...");

            }
        }
    }//GEN-LAST:event_product_txtFocusLost

    private void product_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_product_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_product_txtActionPerformed

    private void quantity_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantity_spinnerStateChanged
        // TODO add your handling code here:
        sum = 0;
        payment_txt.setEnabled(true);
        payment_txt.setEditable(true);
        quantity = (int) quantity_spinner.getValue();

        System.out.println(quantity);
        qty = String.valueOf(quantity + qty_purchased);
        quantity_txt.setText(qty);
        sum = (price) * (Integer.parseInt(qty));
        String total_amount = "";
        if (conversion) {
            total_amount = Number_converter.convertToIndianCurrency(String.valueOf(sum));
        } else {
            total_amount = NumberFormat.getInstance().format(sum);

        }
        total_amount_txt.setText(total_amount);
        //payment_txt.setEnabled(true);

        if (!payment_txt.getText().matches("")) {

            if (Integer.parseInt(payment_checker) > sum) {
                payment_txt.setText("");
                creditor_pay_txt.setText("");
            }

        }
        if (Integer.parseInt(payment_checker) < sum) {
            payment_txt.setText(String.valueOf(payment_checker));
            balance = sum - Long.parseLong(payment_checker);
            if (conversion) {
                creditor_pay_txt.setText(Number_converter.convertToIndianCurrency(String.valueOf(balance)));
            } else {
                creditor_pay_txt.setText(NumberFormat.getInstance().format(balance));

            }
        }


    }//GEN-LAST:event_quantity_spinnerStateChanged

    private void product_cmbPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_product_cmbPropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_product_cmbPropertyChange

    private void reset_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_btnActionPerformed
        // TODO add your handling code here:
        reset_fields();
    }//GEN-LAST:event_reset_btnActionPerformed
    public void delete_sale() {
        String query = "delete from sale where serial_id=?";
        try {
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, serial_id);
            ps.executeUpdate();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(View_sales.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        // TODO add your handling code here:

        delete_sale();
        reset_fields();
        JOptionPane.showMessageDialog(this, "Data deleted successfully!");


    }//GEN-LAST:event_delete_btnActionPerformed

    private void roll_back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roll_back_btnActionPerformed
        // TODO add your handling code here:
        qty = "0";
        product_quantity_add();
        delete_sale();
        reset_fields();
        JOptionPane.showMessageDialog(this, "Data roll backed to its original state...");
    }//GEN-LAST:event_roll_back_btnActionPerformed

    private void brand_txtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brand_txtFocusLost
        // TODO add your handling code here:
        boolean found_brand = false;
        brand_name = "";
        brand_name = brand_txt.getText();
        if (!brand_name.isEmpty()) {
            for (int check = 0; check < brand_cmb.getItemCount(); check++) {
                if (brand_name.equalsIgnoreCase(brand_cmb.getItemAt(check))) {
                    found_brand = true;
                    brand_cmb.setSelectedIndex(check);
                }
            }
            if (found_brand) {
                System.out.println("found");

            } else {
                System.out.println(" Not found");
                brand_items();
                JOptionPane.showMessageDialog(this, "No Matching Item found!\nPlease refer Drop Down Menu...");

            }
        }
    }//GEN-LAST:event_brand_txtFocusLost

    private void brand_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brand_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brand_txtActionPerformed

    private void brand_cmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brand_cmbActionPerformed
        // TODO add your handling code here:

        product_cmb.removeAllItems();
        product_cmb.addItem("-----Select Product-----");
        if (brand_cmb.getSelectedIndex() > 0) {
            brand_name = (String) brand_cmb.getSelectedItem();
            brand_txt.setText(brand_name);
            String brand_id_get = brand_id.get(brand_cmb.getSelectedIndex() - 1);
            String query = "select * from export_item where brand_id=?";

            try {
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, brand_id_get);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    product_cmb.addItem(rs.getString("product_name"));

                }

            } catch (SQLException ex) {
                Logger.getLogger(Add_Sales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_brand_cmbActionPerformed
    String product_select = "";
    String brand_name = "";
    String brand_select = "";
    String serial_id = "";
    String product_name = "";
    int qty_purchased = 0;
    int qty_purchased_select = 0;
    int total_quantity = 0;
    int price = 0;
    String qty = "0";
    int quantity = 0;
    long sum = 0;
    long balance = 0;
    String payment_checker = "0";
    int total_quantity_select = 0;
    int row = 0;
    String query_show = "";
    TableModel tm;
    Vector h;
    String creditor_mode = "";
    String sold_mode = "";
    ArrayList<String> brand_id = new ArrayList<String>();
    boolean reset = false;
    boolean conversion = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bill_no_label;
    private javax.swing.JTextField bill_no_txt;
    public javax.swing.JComboBox<String> brand_cmb;
    private javax.swing.JLabel brand_label;
    public javax.swing.JTextField brand_txt;
    private javax.swing.JLabel charges_label;
    private javax.swing.JTextField charges_txt;
    private javax.swing.JButton convert_amount1;
    private javax.swing.JTextField creditor_pay_txt;
    private javax.swing.JLabel cust_name_label;
    private javax.swing.JTextField cust_name_txt;
    private javax.swing.JButton delete_btn;
    private javax.swing.JLabel due_date_label;
    private javax.swing.JTextField due_date_txt;
    private javax.swing.JLabel id_label;
    private javax.swing.JTextField id_txt;
    private javax.swing.JComboBox<String> mode_cmb;
    private javax.swing.JLabel mode_label;
    private javax.swing.JLabel mode_label1;
    private javax.swing.JLabel payment_label;
    private javax.swing.JLabel payment_label1;
    private javax.swing.JTextField payment_txt;
    private javax.swing.JLabel price_label;
    private javax.swing.JTextField price_txt;
    private javax.swing.JComboBox<String> product_cmb;
    private javax.swing.JLabel product_label;
    private javax.swing.JTextField product_txt;
    private javax.swing.JLabel quantity_label;
    private javax.swing.JSpinner quantity_spinner;
    private javax.swing.JTextField quantity_txt;
    private javax.swing.JButton reset_btn;
    private javax.swing.JButton roll_back_btn;
    private javax.swing.JButton search_btn;
    private javax.swing.JTextField search_txt;
    private javax.swing.JLabel sold_date_label;
    private javax.swing.JTextField sold_date_txt;
    private javax.swing.JLabel total_amount_label;
    private javax.swing.JScrollPane total_amount_scrollpanel;
    private javax.swing.JTextField total_amount_txt;
    private javax.swing.JButton update_btn;
    private javax.swing.JComboBox<String> updated_mode_cmb;
    private javax.swing.JPanel view_details_panel;
    private javax.swing.JPanel view_sale_panel;
    private javax.swing.JScrollPane view_sale_scrollpane;
    private javax.swing.JTable view_sale_table;
    // End of variables declaration//GEN-END:variables
}
