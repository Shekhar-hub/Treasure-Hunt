
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Adjustable;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.TimerTask;
import javafx.scene.control.Hyperlink;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Hp
 */
public class JoinGroup extends javax.swing.JFrame {

    String smileys[] = {"src/emojis/sm1.png", "src/emojis/sm2.jfif", "src/emojis/sm3.jfif", "src/emojis/sm4.png", "src/emojis/sm5.jfif", "src/emojis/sm7.jfif", "src/emojis/sm9.jfif", "src/emojis/sm10.jfif"};
    final String smileysymbol[] = {":)", ":'-)", ":*", "HP", "*-*", ":(", ":'-(", "B-)"};
    String roomid;
    File file;

    /**
     * Creates new form JoinGroup
     */
    JoinGroup(String roomid) {
        initComponents();
         getContentPane().setBackground(new java.awt.Color(153, 255, 204));
        Timer timer = new Timer();
        setSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize()));
        this.roomid = roomid;
        getroomdetail(roomid);
        Checkroomjoin(roomid);
        getpersonsofthisgroup(roomid);
        Thread t1 = new Thread(new MyClass());
        t1.start();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                new Thread(new MyClass()).start();
            }
        }, 5000, 5000);
        ImageIcon icon = new ImageIcon("src/emojis/picforcamera.jfif");
        Image img = icon.getImage();
        Image newimg;
        newimg = img.getScaledInstance(40, 40, java.awt.Image.SCALE_SMOOTH);
        icon = new ImageIcon(newimg);
        photo.setIcon(icon);
        ImageIcon icon1 = new ImageIcon("src/emojis/file_1.jfif");
        Image img1 = icon1.getImage();
        Image newimg1;
        newimg1 = img1.getScaledInstance(40, 40, java.awt.Image.SCALE_SMOOTH);
        icon1 = new ImageIcon(newimg1);
        filebutton.setIcon(icon1);
        getsmileylabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        lbpreview = new javax.swing.JLabel();
        roomname = new javax.swing.JLabel();
        category = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showmessage = new javax.swing.JEditorPane();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        JLabel1 = new javax.swing.JTextArea();
        photo = new javax.swing.JButton();
        smileypanel = new javax.swing.JPanel();
        filebutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setText("Join Group");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(310, 20, 170, 50);

        lbpreview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        getContentPane().add(lbpreview);
        lbpreview.setBounds(40, 20, 240, 200);

        roomname.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        roomname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roomname.setText("jLabel1");
        getContentPane().add(roomname);
        roomname.setBounds(40, 240, 190, 40);

        category.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        category.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        category.setText("jLabel2");
        getContentPane().add(category);
        category.setBounds(40, 300, 190, 40);

        showmessage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jScrollPane1.setViewportView(showmessage);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(560, 20, 720, 480);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(560, 520, 450, 50);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton2.setText("ADD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(1020, 520, 90, 50);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        JLabel1.setEditable(false);
        JLabel1.setColumns(20);
        JLabel1.setFont(new java.awt.Font("Californian FB", 1, 36)); // NOI18N
        JLabel1.setRows(5);
        JLabel1.setAutoscrolls(false);
        jScrollPane2.setViewportView(JLabel1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(50, 350, 200, 300);

        photo.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        photo.setBorder(null);
        photo.setPreferredSize(new java.awt.Dimension(33, 9));
        photo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoActionPerformed(evt);
            }
        });
        getContentPane().add(photo);
        photo.setBounds(1120, 520, 60, 50);

        smileypanel.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(smileypanel);
        smileypanel.setBounds(560, 590, 730, 70);

        filebutton.setBorder(null);
        filebutton.setPreferredSize(new java.awt.Dimension(50, 50));
        filebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filebuttonActionPerformed(evt);
            }
        });
        getContentPane().add(filebutton);
        filebutton.setBounds(1210, 520, 50, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/joinroom")
                    .queryString("roomid", roomid)
                    .queryString("username", GlobalData.nameofuser)
                    .asString();
            if (response.getStatus() == 200) {
                JOptionPane.showMessageDialog(this, response.getBody());
                if (response.getBody().trim().equals("room joined successfully")) {
                    jButton1.setText("Joined");
                    showmessage.setVisible(true);
                    jTextField1.setVisible(true);
                    jButton2.setVisible(true);
                    filebutton.setVisible(true);
                    smileypanel.setVisible(true);
//                    jTextField2.setVisible(true);
                    photo.setVisible(true);
                }
            }
        } catch (UnirestException ex) {
            Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
        getpersonsofthisgroup(roomid);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String message = jTextField1.getText();
            HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/AddMessage")
                    .queryString("username", GlobalData.nameofuser)
                    .queryString("message", message)
                    .queryString("roomid", roomid)
                    .queryString("msgtype", "text")
                    .asString();
            if (response.getStatus() == 200) {
                JOptionPane.showMessageDialog(this, response.getBody());
            }
        } catch (UnirestException ex) {
            Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void photoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoActionPerformed
        JFileChooser jfc = new JFileChooser("C:\\Users\\Hp\\Downloads\\Project details");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpeg", "jpg", "bmp", "png", "gif");
        jfc.setFileFilter(filter);
        jfc.setAcceptAllFileFilterUsed(false);
        int returnVal = jfc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = jfc.getSelectedFile();

            try {
//                jTextField2.setText(file.getPath());
                HttpResponse<String> response = Unirest.post(GlobalData.hostname + "/AddphotoMessage")
                        .queryString("username", GlobalData.nameofuser)
                        .queryString("roomid", roomid)
                        .queryString("msgtype", "photo")
                        .field("message", file)
                        .asString();
                if (response.getStatus() == 200) {
                    JOptionPane.showMessageDialog(this, response.getBody());
                }
            } catch (UnirestException ex) {
                Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_photoActionPerformed

    private void filebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filebuttonActionPerformed
        JFileChooser jfc = new JFileChooser("C:\\Users\\Hp\\Downloads\\Project details");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Files", "pdf", "doc", "txt", "epub", "xls");
        jfc.setFileFilter(filter);
        jfc.setAcceptAllFileFilterUsed(false);
        int returnVal = jfc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = jfc.getSelectedFile();

            try {

                HttpResponse<String> response = Unirest.post(GlobalData.hostname + "/AddphotoMessage")
                        .queryString("username", GlobalData.nameofuser)
                        .queryString("roomid", roomid)
                        .queryString("msgtype", "file")
                        .field("message", file)
                        .asString();
                if (response.getStatus() == 200) {
                    JOptionPane.showMessageDialog(this, response.getBody());
                }
            } catch (UnirestException ex) {
                Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_filebuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JoinGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JoinGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JoinGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JoinGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new JoinGroup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea JLabel1;
    private javax.swing.JLabel category;
    private javax.swing.JButton filebutton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbpreview;
    private javax.swing.JButton photo;
    private javax.swing.JLabel roomname;
    private javax.swing.JEditorPane showmessage;
    private javax.swing.JPanel smileypanel;
    // End of variables declaration//GEN-END:variables

    private void getroomdetail(String roomid) {
        try {
            HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/getroomdetails")
                    .queryString("roomid", roomid)
                    .asString();
            if (response.getStatus() == 200) {
                String ans = response.getBody();
                System.out.println("ans");
                StringTokenizer st = new StringTokenizer(ans, "~~");
                String roomname = st.nextToken();
                String category = st.nextToken();
                String photo = st.nextToken();
                BufferedImage bufferedImage, newimage = null;
                ImageIcon icon = new ImageIcon("");
                try {
                    URL url = new URL(GlobalData.hostname + "/GetResource/" + photo);
                    System.out.println("url : " + url);
                    bufferedImage = ImageIO.read(url);
                    newimage = resizephoto(bufferedImage, lbpreview.getWidth(), lbpreview.getHeight());

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                icon = new ImageIcon(newimage);
                lbpreview.setIcon(icon);
                this.roomname.setText("Room Name:" + roomname);
                this.category.setText("Category:" + category);
            }
        } catch (UnirestException ex) {
            Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    BufferedImage resizephoto(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    private void Checkroomjoin(String roomid) {
        try {
            HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/checkjoinroom")
                    .queryString("roomid", roomid)
                    .queryString("username", GlobalData.nameofuser)
                    .asString();
            if (response.getStatus() == 200) {
                if (response.getBody().trim().equals("joined")) {
                    jButton1.setText("Joined");
                    jButton1.setEnabled(false);
                } else {
                    showmessage.setVisible(false);
                    jTextField1.setVisible(false);
                    jButton2.setVisible(false);
                    filebutton.setVisible(false);
                    smileypanel.setVisible(false);
                    photo.setVisible(false);
                }
            }
        } catch (UnirestException ex) {
            Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getpersonsofthisgroup(String roomid) {
        try {
            HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/getpersons")
                    .queryString("roomid", roomid)
                    .asString();
            if (response.getStatus() == 200) {
                String ans = response.getBody();
                String names = "";
                StringTokenizer st = new StringTokenizer(ans, "~~");
                while (st.hasMoreTokens()) {
                    names += st.nextToken() + "\n";
                }
                JLabel1.setText(names);
            }
        } catch (UnirestException ex) {
            Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getsmileylabels() {
        JLabel jlabel[] = new JLabel[smileys.length];
        int x = 10, y = 10;
        for (int i = 0; i < smileys.length; i++) {
            jlabel[i] = new JLabel();
            ImageIcon icon = new ImageIcon(smileys[i]);
            Image img = icon.getImage();
            Image newimg;
            String sm = smileysymbol[i];
            newimg = img.getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
            icon = new ImageIcon(newimg);
            jlabel[i].setIcon(icon);
            jlabel[i].addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent me) {
                    try {
                        String message = sm;
                        HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/AddMessage")
                                .queryString("username", GlobalData.nameofuser)
                                .queryString("message", message)
                                .queryString("roomid", roomid)
                                .queryString("msgtype", "emoji")
                                .asString();
                        if (response.getStatus() == 200) {
//                            JOptionPane.showMessageDialog(this, response.getBody());
                            System.out.println(response.getBody());
                        }
                    } catch (UnirestException ex) {
                        Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            });
            smileypanel.add(jlabel[i]);
            x = x + 60;
        }
    }

    private void scrollToBottom(JScrollPane scrollPane) {
        JScrollBar verticalBar = scrollPane.getVerticalScrollBar();
        AdjustmentListener downScroller = new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                Adjustable adjustable = e.getAdjustable();
                adjustable.setValue(adjustable.getMaximum());
                verticalBar.removeAdjustmentListener(this);
            }

        };
        verticalBar.addAdjustmentListener(downScroller);
    }

    public class MyClass implements Runnable {

        @Override
        public void run() {
            try {
                HttpResponse<String> response = Unirest.get(GlobalData.hostname + "/fetchmessages")
                        .queryString("roomid", roomid)
                        .asString();
                if (response.getStatus() == 200) {
                    String ans = response.getBody();
                    System.out.println("ans::" + ans);
                    StringTokenizer st = new StringTokenizer(ans, ";;");
                    String msg = "";
                    showmessage.setContentType("text/html");
                    while (st.hasMoreTokens()) {
                        String row = st.nextToken();
                        StringTokenizer col = new StringTokenizer(row, "~~");
                        String message = col.nextToken();
                        String postedby = col.nextToken();
                        String datetime = col.nextToken();
                        String dispname = col.nextToken();
                        String msgtype = col.nextToken();
//                    imgsrc = new File("passport.jpg").toURL().toExternalForm();
                        if (msgtype.equals("text")) {
                            if (postedby.equals(GlobalData.nameofuser)) {
                                msg += "<div style='text-align: right;background-color: #FFC0CB;margin-left:200px;margin-bottom: 10px;border: #000 solid medium'><h3><b>" + message + "</b></h3>";
                                msg += "<p>" + dispname + " " + datetime + "</p></div>";
                            } else {
                                msg += "<div style='text-align: left;background-color: #4FFFCE4;margin-right:200px;margin-bottom: 10px;border: #000 solid medium'><h3><b>" + message + "</b></h3>";
                                msg += "<p>" + dispname + " " + datetime + "</p></div>";
                            }
                        } else if (msgtype.equals("photo")) {
                            if (postedby.equals(GlobalData.nameofuser)) {
                                msg += "<div style='text-align: right;background-color: #FFC0CB;margin-left:200px;margin-bottom: 10px;border: #000 solid medium'><img src='file:" + message + "' width='200' height='200' />";
                                msg += "<p>" + dispname + " " + datetime + "</p></div>";
                            } else {
                                msg += "<div style='text-align: left;background-color: #4FFFCE4;margin-bottom: 10px;margin-right:200px;border: #000 solid medium'><img src='file:" + message + "' width='200' height='200' />";
                                msg += "<p>" + dispname + " " + datetime + "</p></div>";
                            }
                        } else if (msgtype.equals("emoji")) {
                            for (int i = 0; i < smileysymbol.length; i++) {
                                if (message.equals(smileysymbol[i])) {
                                    if (postedby.equals(GlobalData.nameofuser)) {
                                        msg += "<div style='text-align: right;background-color: #FFC0CB;margin-bottom: 10px;margin-left:200px;border: #000 solid medium'><img src='file:" + smileys[i] + "' width='50' height='50' />";
                                        msg += "<p>" + dispname + " " + datetime + "</p></div>";
                                    } else {
                                        msg += "<div style='text-align: left;background-color: #4FFFCE4;margin-bottom: 10px;margin-right:200px;border: #000 solid medium'><img src='file:" + smileys[i] + "' width='50' height='50' />";
                                        msg += "<p>" + dispname + " " + datetime + "</p></div>";
                                    }
                                }

                            }
                        } else if (msgtype.equals("file")) {

                            if (postedby.equals(GlobalData.nameofuser)) {
                                msg += "<div  style='text-align: right;background-color: #FFC0CB;margin-bottom: 10px;margin-left:200px;border: #000 solid medium'><a href=http://'" + message + "'> <img src='file:src/emojis/doc.jfif' width='70' height='70' /></a>";
                                msg += "<p>" + dispname + " " + datetime + "</p></div>";
                            } else {
                                msg += "<div  style='text-align: left;background-color: #4FFFCE4;margin-bottom: 10px;margin-right:200px;border: #000 solid medium'><a href=http://'" + message + "'><img src='file:src/emojis/doc.jfif' width='70' height='70' /></a>";
                                msg += "<p>" + dispname + " " + datetime + "</p></div>";

                            }
                        }
                    }
                    showmessage.setText(msg);
                    showmessage.setEditable(false);
                    scrollToBottom(jScrollPane1);

                    showmessage.addHyperlinkListener(new HyperlinkListener() {

                        @Override
                        public void hyperlinkUpdate(HyperlinkEvent he) {
                            if (he.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                                URL value = he.getURL();
                                String val = value.toString();
                                String path = val.substring(val.indexOf("/") + 2);
                                System.out.println("path::" + path);
                                System.out.println("Actual URL" + he.getURL());
                                int ans = JOptionPane.showConfirmDialog(rootPane, "do you want to download the file??");
                                if (ans == JOptionPane.YES_OPTION) {
                                    try {
                                        HttpResponse<InputStream> response = Unirest.get(GlobalData.hostname + "/GetResource/" + path)
                                                .asBinary();
                                        InputStream is = response.getBody();
                                        FileOutputStream fos;
                                        System.out.println("responsebody is" + is);
                                        fos = new FileOutputStream(System.getProperty("user.home") + "/Downloads/abc123.pdf");
                                        long contentlength = Integer.parseInt(response.getHeaders().getFirst("Content-Length"));
                                        byte b[] = new byte[10000];
                                        int r;
                                        long count = 0;
                                        while (true) {
                                            r = is.read(b, 0, 10000);
                                            fos.write(b, 0, r);
                                            count = count + r;
                                            System.out.println(count * 100 / contentlength + " %");
                                            if (count == contentlength) {
                                                break;
                                            }
                                        }
                                        fos.close();
                                        System.out.println("fikle downloaded");
                                        System.out.println("File Downloaded....");
                                        File f = new File(System.getProperty("user.home") + "\\Downloads\\abc123.pdf");
                                        URI u = f.toURI();
                                        Desktop d = Desktop.getDesktop();
                                        d.browse(u);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            }
                        }

                    }
                    );

                }
            } catch (UnirestException ex) {
                Logger.getLogger(JoinGroup.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
